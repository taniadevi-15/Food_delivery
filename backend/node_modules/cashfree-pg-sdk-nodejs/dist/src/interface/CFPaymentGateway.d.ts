import { CFOrderResponse, CFPayResponse, CFPaymentsForOrderResponse, CFPaymentEntityResponse, CFRefundResponse, CFAllRefundsResponse, CFSettlementsResponse, CFAllInstrumentsResponse, CFInstrumentsResponse, CFCryptogramResponse, CFLinkResponse, CFCancelledLinkResponse, CFPaymentLinkOrdersRespnse } from "./CFResponses";
import { CFConfig, CFEnvironment } from "./CFConfig";
import { CFHeader } from "./CFHeader";
import { CFOrderRequest, CFOrderPayRequest, CFAuthorizationRequest, CFRefundRequest, CFLinkRequest } from "../model/models";
export declare class CFPaymentGateway {
    getURL(environment: CFEnvironment): string;
    getEnvironment(environment: CFEnvironment): string;
    orderCreate(cfConfig: CFConfig, cFOrderRequest: CFOrderRequest, header?: CFHeader): Promise<CFOrderResponse>;
    orderPay(cfConfig: CFConfig, cFOrderPayRequest: CFOrderPayRequest, header?: CFHeader): Promise<CFPayResponse>;
    orderSessionsPay(cfConfig: CFConfig, cFOrderPayRequest: CFOrderPayRequest, header?: CFHeader): Promise<CFPayResponse>;
    getOrder(cfConfig: CFConfig, orderID: string, header?: CFHeader): Promise<CFOrderResponse>;
    preAuthorization(cfConfig: CFConfig, orderId: string, cfAuthorizationRequest: CFAuthorizationRequest, header?: CFHeader): Promise<CFPaymentEntityResponse>;
    getPaymentsForOrder(cfConfig: CFConfig, orderID: string, header?: CFHeader): Promise<CFPaymentsForOrderResponse>;
    getPaymentsByPaymentID(cfConfig: CFConfig, orderID: string, cfPaymentID: number, header?: CFHeader): Promise<CFPaymentEntityResponse>;
    createRefund(cfConfig: CFConfig, orderID: string, cfRefundRequest: CFRefundRequest, header?: CFHeader): Promise<CFRefundResponse>;
    getRefund(cfConfig: CFConfig, orderID: string, refundID: string, header?: CFHeader): Promise<CFRefundResponse>;
    getAllRefundsForOrder(cfConfig: CFConfig, orderID: string, header?: CFHeader): Promise<CFAllRefundsResponse>;
    getSettlements(cfConfig: CFConfig, orderID: string, header?: CFHeader): Promise<CFSettlementsResponse>;
    getAllSavedInstruments(cfConfig: CFConfig, customerID: string, instrumentType?: "card", header?: CFHeader): Promise<CFAllInstrumentsResponse>;
    getSavedInstrumentById(cfConfig: CFConfig, customerID: string, instrumentID: string, header?: CFHeader): Promise<CFInstrumentsResponse>;
    getCryptogramByInstrumentID(cfConfig: CFConfig, customerID: string, instrumentID: string, header?: CFHeader): Promise<CFCryptogramResponse>;
    deleteInstrumentByID(cfConfig: CFConfig, customerID: string, instrumentID: string, header?: CFHeader): Promise<CFInstrumentsResponse>;
    createPaymentLink(cfConfig: CFConfig, cfLinkRequest: CFLinkRequest, header?: CFHeader): Promise<CFLinkResponse>;
    getPaymentLinkDetails(cfConfig: CFConfig, linkID: string, header?: CFHeader): Promise<CFLinkResponse>;
    cancelPaymentLink(cfConfig: CFConfig, linkID: string, header?: CFHeader): Promise<CFCancelledLinkResponse>;
    getPaymentLinkOrders(cfConfig: CFConfig, linkID: string, header?: CFHeader): Promise<CFPaymentLinkOrdersRespnse>;
}
