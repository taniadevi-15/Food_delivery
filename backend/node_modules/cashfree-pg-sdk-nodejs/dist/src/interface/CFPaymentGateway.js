"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CFPaymentGateway = void 0;
const CFConfig_1 = require("./CFConfig");
const apis_1 = require("../api/apis");
const CFSentry_1 = __importDefault(require("./CFSentry"));
class CFPaymentGateway {
    getURL(environment) {
        if (environment == CFConfig_1.CFEnvironment.SANDBOX) {
            return "https://sandbox.cashfree.com/pg";
        }
        return "https://api.cashfree.com/pg";
    }
    getEnvironment(environment) {
        if (environment == CFConfig_1.CFEnvironment.SANDBOX) {
            return "SANDBOX";
        }
        return "PRODUCTION";
    }
    orderCreate(cfConfig, cFOrderRequest, header = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            CFSentry_1.default.SetupSentry(this.getEnvironment(cfConfig.environment));
            try {
                const url = this.getURL(cfConfig.environment);
                var apiInstance = new apis_1.OrdersApi(url);
                const result = yield apiInstance.createOrder(cfConfig.clientId, cfConfig.clientSecret, cfConfig.apiVersion, false, header === null || header === void 0 ? void 0 : header.idempotencyKey, header === null || header === void 0 ? void 0 : header.requestID, cFOrderRequest, cfConfig.timeout, (cfConfig.webProxy = null));
                return result;
            }
            catch (e) {
                CFSentry_1.default.CaptureError(e.message, "orderCreate");
                throw e;
            }
        });
    }
    orderPay(cfConfig, cFOrderPayRequest, header = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            CFSentry_1.default.SetupSentry(this.getEnvironment(cfConfig.environment));
            try {
                const url = this.getURL(cfConfig.environment);
                var apiInstance = new apis_1.OrdersApi(url);
                const cfPayResponse = yield apiInstance.orderPay(cfConfig.apiVersion, header === null || header === void 0 ? void 0 : header.requestID, cFOrderPayRequest, cfConfig.timeout, (cfConfig.webProxy = null));
                return cfPayResponse;
            }
            catch (e) {
                CFSentry_1.default.CaptureError(e.message, "orderPay");
                throw e;
            }
        });
    }
    orderSessionsPay(cfConfig, cFOrderPayRequest, header = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            CFSentry_1.default.SetupSentry(this.getEnvironment(cfConfig.environment));
            try {
                const url = this.getURL(cfConfig.environment);
                var apiInstance = new apis_1.OrdersApi(url);
                const cfPayResponse = yield apiInstance.orderSessionPay(cfConfig.apiVersion, header === null || header === void 0 ? void 0 : header.requestID, cFOrderPayRequest, cfConfig.timeout, (cfConfig.webProxy = null));
                return cfPayResponse;
            }
            catch (e) {
                CFSentry_1.default.CaptureError(e.message, "orderSessionsPay");
                throw e;
            }
        });
    }
    getOrder(cfConfig, orderID, header = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            CFSentry_1.default.SetupSentry(this.getEnvironment(cfConfig.environment));
            try {
                const url = this.getURL(cfConfig.environment);
                var apiInstance = new apis_1.OrdersApi(url);
                const cfPayResponse = yield apiInstance.getOrder(cfConfig.clientId, cfConfig.clientSecret, orderID, cfConfig.apiVersion, undefined, undefined, header === null || header === void 0 ? void 0 : header.requestID, cfConfig === null || cfConfig === void 0 ? void 0 : cfConfig.timeout, (cfConfig.webProxy = null));
                return cfPayResponse;
            }
            catch (e) {
                CFSentry_1.default.CaptureError(e.message, "getOrder");
                throw e;
            }
        });
    }
    preAuthorization(cfConfig, orderId, cfAuthorizationRequest, header = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            CFSentry_1.default.SetupSentry(this.getEnvironment(cfConfig.environment));
            try {
                const url = this.getURL(cfConfig.environment);
                var apiInstance = new apis_1.OrdersApi(url);
                var result = yield apiInstance.preauthorization(cfConfig.clientId, cfConfig.clientSecret, orderId, cfConfig.apiVersion, undefined, header === null || header === void 0 ? void 0 : header.idempotencyKey, header === null || header === void 0 ? void 0 : header.requestID, cfAuthorizationRequest, cfConfig === null || cfConfig === void 0 ? void 0 : cfConfig.timeout, (cfConfig.webProxy = null));
                return result;
            }
            catch (e) {
                CFSentry_1.default.CaptureError(e.message, "preAuthorization");
                throw e;
            }
        });
    }
    getPaymentsForOrder(cfConfig, orderID, header = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            CFSentry_1.default.SetupSentry(this.getEnvironment(cfConfig.environment));
            try {
                const url = this.getURL(cfConfig.environment);
                var apiInstance = new apis_1.PaymentsApi(url);
                var cFPaymentsForOrderResponse = yield apiInstance.getPaymentsfororder(cfConfig.clientId, cfConfig.clientSecret, orderID, cfConfig.apiVersion, undefined, undefined, header === null || header === void 0 ? void 0 : header.requestID, cfConfig === null || cfConfig === void 0 ? void 0 : cfConfig.timeout, (cfConfig.webProxy = null));
                return cFPaymentsForOrderResponse;
            }
            catch (e) {
                CFSentry_1.default.CaptureError(e.message, "getPaymentsForOrder");
                throw e;
            }
        });
    }
    getPaymentsByPaymentID(cfConfig, orderID, cfPaymentID, header = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            CFSentry_1.default.SetupSentry(this.getEnvironment(cfConfig.environment));
            try {
                const url = this.getURL(cfConfig.environment);
                var apiInstance = new apis_1.PaymentsApi(url);
                var cfPaymentsEntity = apiInstance.getPaymentbyId(cfConfig.clientId, cfConfig.clientSecret, orderID, cfPaymentID, cfConfig.apiVersion, undefined, undefined, header === null || header === void 0 ? void 0 : header.requestID, cfConfig === null || cfConfig === void 0 ? void 0 : cfConfig.timeout, (cfConfig.webProxy = null));
                return cfPaymentsEntity;
            }
            catch (e) {
                CFSentry_1.default.CaptureError(e.message, "getPaymentsByPaymentID");
                throw e;
            }
        });
    }
    createRefund(cfConfig, orderID, cfRefundRequest, header = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            CFSentry_1.default.SetupSentry(this.getEnvironment(cfConfig.environment));
            try {
                const url = this.getURL(cfConfig.environment);
                var apiInstance = new apis_1.RefundsApi(url);
                var cfRefundResponse = yield apiInstance.createrefund(cfConfig.clientId, cfConfig.clientSecret, orderID, cfConfig.apiVersion, undefined, header === null || header === void 0 ? void 0 : header.idempotencyKey, header === null || header === void 0 ? void 0 : header.requestID, cfRefundRequest, cfConfig === null || cfConfig === void 0 ? void 0 : cfConfig.timeout, (cfConfig.webProxy = null));
                return cfRefundResponse;
            }
            catch (e) {
                CFSentry_1.default.CaptureError(e.message, "createRefund");
                throw e;
            }
        });
    }
    getRefund(cfConfig, orderID, refundID, header = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            CFSentry_1.default.SetupSentry(this.getEnvironment(cfConfig.environment));
            try {
                const url = this.getURL(cfConfig.environment);
                var apiInstance = new apis_1.RefundsApi(url);
                var cfRefundResponse = yield apiInstance.getRefund(cfConfig.clientId, cfConfig.clientSecret, orderID, refundID, cfConfig.apiVersion, undefined, undefined, header === null || header === void 0 ? void 0 : header.requestID, cfConfig === null || cfConfig === void 0 ? void 0 : cfConfig.timeout, (cfConfig.webProxy = null));
                return cfRefundResponse;
            }
            catch (e) {
                CFSentry_1.default.CaptureError(e.message, "getRefund");
                throw e;
            }
        });
    }
    getAllRefundsForOrder(cfConfig, orderID, header = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            CFSentry_1.default.SetupSentry(this.getEnvironment(cfConfig.environment));
            try {
                const url = this.getURL(cfConfig.environment);
                var apiInstance = new apis_1.RefundsApi(url);
                var cfRefundResponse = yield apiInstance.getallrefundsfororder(cfConfig.clientId, cfConfig.clientSecret, orderID, cfConfig.apiVersion, cfConfig === null || cfConfig === void 0 ? void 0 : cfConfig.timeout, (cfConfig.webProxy = null));
                return cfRefundResponse;
            }
            catch (e) {
                CFSentry_1.default.CaptureError(e.message, "getAllRefundsForOrder");
                throw e;
            }
        });
    }
    getSettlements(cfConfig, orderID, header = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            CFSentry_1.default.SetupSentry(this.getEnvironment(cfConfig.environment));
            try {
                const url = this.getURL(cfConfig.environment);
                var apiInstance = new apis_1.SettlementsApi(url);
                var cfSettlementResponse = apiInstance.getsettlements(cfConfig.clientId, cfConfig.clientSecret, orderID, cfConfig.apiVersion, undefined, header === null || header === void 0 ? void 0 : header.idempotencyKey, header === null || header === void 0 ? void 0 : header.requestID, cfConfig === null || cfConfig === void 0 ? void 0 : cfConfig.timeout, (cfConfig.webProxy = null));
                return cfSettlementResponse;
            }
            catch (e) {
                CFSentry_1.default.CaptureError(e.message, "getSettlements");
                throw e;
            }
        });
    }
    getAllSavedInstruments(cfConfig, customerID, instrumentType = "card", header = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            CFSentry_1.default.SetupSentry(this.getEnvironment(cfConfig.environment));
            try {
                const url = this.getURL(cfConfig.environment);
                var apiInstance = new apis_1.TokenVaultApi(url);
                var instrumentsResponse = yield apiInstance.fetchAllSavedInstruments(cfConfig.clientId, cfConfig.clientSecret, customerID, instrumentType, cfConfig.apiVersion, undefined, header === null || header === void 0 ? void 0 : header.idempotencyKey, header === null || header === void 0 ? void 0 : header.requestID, cfConfig === null || cfConfig === void 0 ? void 0 : cfConfig.timeout, (cfConfig.webProxy = null));
                return instrumentsResponse;
            }
            catch (e) {
                CFSentry_1.default.CaptureError(e.message, "getAllSavedInstruments");
                throw e;
            }
        });
    }
    getSavedInstrumentById(cfConfig, customerID, instrumentID, header = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            CFSentry_1.default.SetupSentry(this.getEnvironment(cfConfig.environment));
            try {
                const url = this.getURL(cfConfig.environment);
                var apiInstance = new apis_1.TokenVaultApi(url);
                var instrumentResponse = yield apiInstance.fetchSpecificSavedInstrument(cfConfig.clientId, cfConfig.clientSecret, customerID, instrumentID, cfConfig.apiVersion, undefined, header === null || header === void 0 ? void 0 : header.idempotencyKey, header === null || header === void 0 ? void 0 : header.requestID, cfConfig === null || cfConfig === void 0 ? void 0 : cfConfig.timeout, (cfConfig.webProxy = null));
                return instrumentResponse;
            }
            catch (e) {
                CFSentry_1.default.CaptureError(e.message, "getSavedInstrumentById");
                throw e;
            }
        });
    }
    getCryptogramByInstrumentID(cfConfig, customerID, instrumentID, header = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            CFSentry_1.default.SetupSentry(this.getEnvironment(cfConfig.environment));
            try {
                const url = this.getURL(cfConfig.environment);
                var apiInstance = new apis_1.TokenVaultApi(url);
                var cryptogramResponse = yield apiInstance.fetchCryptogram(cfConfig.clientId, cfConfig.clientSecret, customerID, instrumentID, cfConfig.apiVersion, undefined, header === null || header === void 0 ? void 0 : header.idempotencyKey, header === null || header === void 0 ? void 0 : header.requestID, cfConfig === null || cfConfig === void 0 ? void 0 : cfConfig.timeout, (cfConfig.webProxy = null));
                return cryptogramResponse;
            }
            catch (e) {
                CFSentry_1.default.CaptureError(e.message, "getCryptogramByInstrumentID");
                throw e;
            }
        });
    }
    deleteInstrumentByID(cfConfig, customerID, instrumentID, header = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            CFSentry_1.default.SetupSentry(this.getEnvironment(cfConfig.environment));
            try {
                const url = this.getURL(cfConfig.environment);
                var apiInstance = new apis_1.TokenVaultApi(url);
                var instrumentsResponse = yield apiInstance.deleteSpecificSavedInstrument(cfConfig.clientId, cfConfig.clientSecret, customerID, instrumentID, cfConfig.apiVersion, cfConfig === null || cfConfig === void 0 ? void 0 : cfConfig.timeout, (cfConfig.webProxy = null));
                return instrumentsResponse;
            }
            catch (e) {
                CFSentry_1.default.CaptureError(e.message, "deleteInstrumentByID");
                throw e;
            }
        });
    }
    createPaymentLink(cfConfig, cfLinkRequest, header = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            CFSentry_1.default.SetupSentry(this.getEnvironment(cfConfig.environment));
            try {
                const url = this.getURL(cfConfig.environment);
                var apiInstance = new apis_1.PaymentLinksApi(url);
                var response = yield apiInstance.createPaymentLink(cfConfig.clientId, cfConfig.clientSecret, cfConfig.apiVersion, undefined, header === null || header === void 0 ? void 0 : header.idempotencyKey, header === null || header === void 0 ? void 0 : header.requestID, cfLinkRequest, cfConfig === null || cfConfig === void 0 ? void 0 : cfConfig.timeout, (cfConfig.webProxy = null));
                return response;
            }
            catch (e) {
                CFSentry_1.default.CaptureError(e.message, "createPaymentLink");
                throw e;
            }
        });
    }
    getPaymentLinkDetails(cfConfig, linkID, header = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            CFSentry_1.default.SetupSentry(this.getEnvironment(cfConfig.environment));
            try {
                const url = this.getURL(cfConfig.environment);
                var apiInstance = new apis_1.PaymentLinksApi(url);
                var response = yield apiInstance.getPaymentLinkDetails(cfConfig.clientId, cfConfig.clientSecret, linkID, cfConfig.apiVersion, undefined, header === null || header === void 0 ? void 0 : header.idempotencyKey, header === null || header === void 0 ? void 0 : header.requestID, cfConfig === null || cfConfig === void 0 ? void 0 : cfConfig.timeout, (cfConfig.webProxy = null));
                return response;
            }
            catch (e) {
                CFSentry_1.default.CaptureError(e.message, "getPaymentLinkDetails");
                throw e;
            }
        });
    }
    cancelPaymentLink(cfConfig, linkID, header = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            CFSentry_1.default.SetupSentry(this.getEnvironment(cfConfig.environment));
            try {
                const url = this.getURL(cfConfig.environment);
                var apiInstance = new apis_1.PaymentLinksApi(url);
                var response = yield apiInstance.cancelPaymentLink(cfConfig.clientId, cfConfig.clientSecret, linkID, cfConfig.apiVersion, cfConfig === null || cfConfig === void 0 ? void 0 : cfConfig.timeout, (cfConfig.webProxy = null));
                return response;
            }
            catch (e) {
                CFSentry_1.default.CaptureError(e.message, "cancelPaymentLink");
                throw e;
            }
        });
    }
    getPaymentLinkOrders(cfConfig, linkID, header = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            CFSentry_1.default.SetupSentry(this.getEnvironment(cfConfig.environment));
            try {
                const url = this.getURL(cfConfig.environment);
                var apiInstance = new apis_1.PaymentLinksApi(url);
                var response = yield apiInstance.getPaymentLinkOrders(cfConfig.clientId, cfConfig.clientSecret, linkID, cfConfig.apiVersion, undefined, header === null || header === void 0 ? void 0 : header.idempotencyKey, header === null || header === void 0 ? void 0 : header.requestID, cfConfig === null || cfConfig === void 0 ? void 0 : cfConfig.timeout, (cfConfig.webProxy = null));
                return response;
            }
            catch (e) {
                CFSentry_1.default.CaptureError(e.message, "getPaymentLinkOrders");
                throw e;
            }
        });
    }
}
exports.CFPaymentGateway = CFPaymentGateway;
