"use strict";
/**
 * New Payment Gateway APIs
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2022-01-01
 * Contact: nextgenapi@cashfree.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrdersApi = exports.OrdersApiApiKeys = void 0;
const request_1 = __importDefault(require("request"));
const models_1 = require("../model/models");
const apis_1 = require("./apis");
let defaultBasePath = 'https://sandbox.cashfree.com/pg';
// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================
var OrdersApiApiKeys;
(function (OrdersApiApiKeys) {
})(OrdersApiApiKeys = exports.OrdersApiApiKeys || (exports.OrdersApiApiKeys = {}));
class OrdersApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this._defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new models_1.VoidAuth(),
        };
        this.interceptors = [];
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    set defaultHeaders(defaultHeaders) {
        this._defaultHeaders = defaultHeaders;
    }
    get defaultHeaders() {
        return this._defaultHeaders;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[OrdersApiApiKeys[key]].apiKey = value;
    }
    addInterceptor(interceptor) {
        this.interceptors.push(interceptor);
    }
    /**
     * Use this API to create orders with Cashfree from your backend and get the payment link
     * @summary Create Order
     * @param xClientId
     * @param xClientSecret
     * @param xApiVersion
     * @param xIdempotencyReplayed
     * @param xIdempotencyKey
     * @param xRequestId
     * @param cFOrderRequest
     */
    createOrder(xClientId, xClientSecret, xApiVersion, xIdempotencyReplayed, xIdempotencyKey, xRequestId, cFOrderRequest, requestTimeout, webProxy, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/orders';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/json'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            // verify required parameter 'xClientId' is not null or undefined
            if (xClientId === null || xClientId === undefined) {
                throw new Error('Required parameter xClientId was null or undefined when calling createOrder.');
            }
            // verify required parameter 'xClientSecret' is not null or undefined
            if (xClientSecret === null || xClientSecret === undefined) {
                throw new Error('Required parameter xClientSecret was null or undefined when calling createOrder.');
            }
            localVarHeaderParams['x-client-id'] = models_1.ObjectSerializer.serialize(xClientId, "string");
            localVarHeaderParams['x-client-secret'] = models_1.ObjectSerializer.serialize(xClientSecret, "string");
            localVarHeaderParams['x-api-version'] = models_1.ObjectSerializer.serialize(xApiVersion, "string");
            localVarHeaderParams['x-idempotency-replayed'] = models_1.ObjectSerializer.serialize(xIdempotencyReplayed, "boolean");
            localVarHeaderParams['x-idempotency-key'] = models_1.ObjectSerializer.serialize(xIdempotencyKey, "string");
            localVarHeaderParams['x-request-id'] = models_1.ObjectSerializer.serialize(xRequestId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = Object.assign({ method: 'POST', qs: localVarQueryParameters, headers: localVarHeaderParams, uri: localVarPath, useQuerystring: this._useQuerystring, json: true, body: models_1.ObjectSerializer.serialize(cFOrderRequest, "CFOrderRequest"), timeout: requestTimeout }, (webProxy && {
                proxy: webProxy
            }));
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors) {
                interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    (0, request_1.default)(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "CFOrder");
                                resolve({ cfHeaders: response.headers, cfOrder: body });
                            }
                            else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     * Use this API to view all details of an order.
     * @summary Get Order
     * @param xClientId
     * @param xClientSecret
     * @param orderId
     * @param xApiVersion
     * @param xIdempotencyReplayed
     * @param xIdempotencyKey
     * @param xRequestId
     */
    getOrder(xClientId, xClientSecret, orderId, xApiVersion, xIdempotencyReplayed, xIdempotencyKey, xRequestId, requestTimeout, webProxy, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/orders/{order_id}'
                .replace('{' + 'order_id' + '}', encodeURIComponent(String(orderId)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/json'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            // verify required parameter 'xClientId' is not null or undefined
            if (xClientId === null || xClientId === undefined) {
                throw new Error('Required parameter xClientId was null or undefined when calling getOrder.');
            }
            // verify required parameter 'xClientSecret' is not null or undefined
            if (xClientSecret === null || xClientSecret === undefined) {
                throw new Error('Required parameter xClientSecret was null or undefined when calling getOrder.');
            }
            // verify required parameter 'orderId' is not null or undefined
            if (orderId === null || orderId === undefined) {
                throw new Error('Required parameter orderId was null or undefined when calling getOrder.');
            }
            localVarHeaderParams['x-client-id'] = models_1.ObjectSerializer.serialize(xClientId, "string");
            localVarHeaderParams['x-client-secret'] = models_1.ObjectSerializer.serialize(xClientSecret, "string");
            localVarHeaderParams['x-api-version'] = models_1.ObjectSerializer.serialize(xApiVersion, "string");
            localVarHeaderParams['x-idempotency-replayed'] = models_1.ObjectSerializer.serialize(xIdempotencyReplayed, "boolean");
            localVarHeaderParams['x-idempotency-key'] = models_1.ObjectSerializer.serialize(xIdempotencyKey, "string");
            localVarHeaderParams['x-request-id'] = models_1.ObjectSerializer.serialize(xRequestId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = Object.assign({ method: 'GET', qs: localVarQueryParameters, headers: localVarHeaderParams, uri: localVarPath, useQuerystring: this._useQuerystring, json: true, timeout: requestTimeout }, (webProxy && {
                proxy: webProxy
            }));
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors) {
                interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    (0, request_1.default)(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "CFOrder");
                                resolve({ cfHeaders: response.headers, cfOrder: body });
                            }
                            else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     * Use this API when you have already created the orders and want Cashfree to process the payment.
     * @summary Order Pay
     * @param xApiVersion
     * @param xRequestId
     * @param cFOrderPayRequest
     */
    orderPay(xApiVersion, xRequestId, cFOrderPayRequest, requestTimeout, webProxy, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/orders/pay';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/json'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            // verify required parameter 'xApiVersion' is not null or undefined
            if (xApiVersion === null || xApiVersion === undefined) {
                throw new Error('Required parameter xApiVersion was null or undefined when calling orderPay.');
            }
            localVarHeaderParams['x-request-id'] = models_1.ObjectSerializer.serialize(xRequestId, "string");
            localVarHeaderParams['x-api-version'] = models_1.ObjectSerializer.serialize(xApiVersion, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = Object.assign({ method: 'POST', qs: localVarQueryParameters, headers: localVarHeaderParams, uri: localVarPath, useQuerystring: this._useQuerystring, json: true, body: models_1.ObjectSerializer.serialize(cFOrderPayRequest, "CFOrderPayRequest"), timeout: requestTimeout }, (webProxy && {
                proxy: webProxy
            }));
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors) {
                interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    (0, request_1.default)(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "CFOrderPayResponse");
                                resolve({ cfHeaders: response.headers, cfOrderPayResponse: body });
                            }
                            else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     * Use this API when you have already created the orders and want Cashfree to process the payment.
     * @summary Order Pay
     * @param xApiVersion
     * @param xRequestId
     * @param cFOrderPayRequest
     */
    orderSessionPay(xApiVersion, xRequestId, cFOrderPayRequest, requestTimeout, webProxy, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/orders/sessions';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/json'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            // verify required parameter 'xApiVersion' is not null or undefined
            if (xApiVersion === null || xApiVersion === undefined) {
                throw new Error('Required parameter xApiVersion was null or undefined when calling orderPay.');
            }
            localVarHeaderParams['x-request-id'] = models_1.ObjectSerializer.serialize(xRequestId, "string");
            localVarHeaderParams['x-api-version'] = models_1.ObjectSerializer.serialize(xApiVersion, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = Object.assign({ method: 'POST', qs: localVarQueryParameters, headers: localVarHeaderParams, uri: localVarPath, useQuerystring: this._useQuerystring, json: true, body: models_1.ObjectSerializer.serialize(cFOrderPayRequest, "CFOrderPayRequest"), timeout: requestTimeout }, (webProxy && {
                proxy: webProxy
            }));
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors) {
                interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    (0, request_1.default)(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "CFOrderPayResponse");
                                resolve({ cfHeaders: response.headers, cfOrderPayResponse: body });
                            }
                            else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     * Use this API to capture or void a preauthorized payment
     * @summary Preauthorization
     * @param xClientId
     * @param xClientSecret
     * @param orderId
     * @param xApiVersion
     * @param xIdempotencyReplayed
     * @param xIdempotencyKey
     * @param xRequestId
     * @param cFAuthorizationRequest
     */
    preauthorization(xClientId, xClientSecret, orderId, xApiVersion, xIdempotencyReplayed, xIdempotencyKey, xRequestId, cFAuthorizationRequest, requestTimeout, webProxy, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/orders/{order_id}/authorization'
                .replace('{' + 'order_id' + '}', encodeURIComponent(String(orderId)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/json'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            // verify required parameter 'xClientId' is not null or undefined
            if (xClientId === null || xClientId === undefined) {
                throw new Error('Required parameter xClientId was null or undefined when calling preauthorization.');
            }
            // verify required parameter 'xClientSecret' is not null or undefined
            if (xClientSecret === null || xClientSecret === undefined) {
                throw new Error('Required parameter xClientSecret was null or undefined when calling preauthorization.');
            }
            // verify required parameter 'orderId' is not null or undefined
            if (orderId === null || orderId === undefined) {
                throw new Error('Required parameter orderId was null or undefined when calling preauthorization.');
            }
            localVarHeaderParams['x-client-id'] = models_1.ObjectSerializer.serialize(xClientId, "string");
            localVarHeaderParams['x-client-secret'] = models_1.ObjectSerializer.serialize(xClientSecret, "string");
            localVarHeaderParams['x-api-version'] = models_1.ObjectSerializer.serialize(xApiVersion, "string");
            localVarHeaderParams['x-idempotency-replayed'] = models_1.ObjectSerializer.serialize(xIdempotencyReplayed, "boolean");
            localVarHeaderParams['x-idempotency-key'] = models_1.ObjectSerializer.serialize(xIdempotencyKey, "string");
            localVarHeaderParams['x-request-id'] = models_1.ObjectSerializer.serialize(xRequestId, "string");
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = Object.assign({ method: 'POST', qs: localVarQueryParameters, headers: localVarHeaderParams, uri: localVarPath, useQuerystring: this._useQuerystring, json: true, body: models_1.ObjectSerializer.serialize(cFAuthorizationRequest, "CFAuthorizationRequest"), timeout: requestTimeout }, (webProxy && {
                proxy: webProxy
            }));
            let authenticationPromise = Promise.resolve();
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors) {
                interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    (0, request_1.default)(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "CFPaymentsEntity");
                                resolve({ cfHeaders: response.headers, cfPaymentsEntity: body });
                            }
                            else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
}
exports.OrdersApi = OrdersApi;
