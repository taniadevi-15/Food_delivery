/**
 * New Payment Gateway APIs
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2022-01-01
 * Contact: nextgenapi@cashfree.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/// <reference types="node" />
import http from 'http';
import { CFCryptogram } from '../model/cFCryptogram';
import { CFFetchAllSavedInstruments } from '../model/cFFetchAllSavedInstruments';
import { Authentication, Interceptor } from '../model/models';
export declare enum TokenVaultApiApiKeys {
}
export declare class TokenVaultApi {
    protected _basePath: string;
    protected _defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
    };
    protected interceptors: Interceptor[];
    constructor(basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    set defaultHeaders(defaultHeaders: any);
    get defaultHeaders(): any;
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: TokenVaultApiApiKeys, value: string): void;
    addInterceptor(interceptor: Interceptor): void;
    /**
     * To delete a saved instrument for a customer id and instrument id
     * @summary Delete Saved Instrument
     * @param xClientId
     * @param xClientSecret
     * @param customerId
     * @param instrumentId
     * @param xApiVersion
     */
    deleteSpecificSavedInstrument(xClientId: string, xClientSecret: string, customerId: string, instrumentId: string, xApiVersion?: string, requestTimeout?: Number, webProxy?: any, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        cfHeaders: http.IncomingHttpHeaders;
        cfInstrument: CFFetchAllSavedInstruments;
    }>;
    /**
     * To get all saved instruments for a customer id
     * @summary Fetch All Saved Instruments
     * @param xClientId
     * @param xClientSecret
     * @param customerId
     * @param instrumentType
     * @param xApiVersion
     * @param xIdempotencyReplayed
     * @param xIdempotencyKey
     * @param xRequestId
     */
    fetchAllSavedInstruments(xClientId: string, xClientSecret: string, customerId: string, instrumentType: 'card', xApiVersion?: string, xIdempotencyReplayed?: boolean, xIdempotencyKey?: string, xRequestId?: string, requestTimeout?: Number, webProxy?: any, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        cfHeaders: http.IncomingHttpHeaders;
        cfInstruments: Array<CFFetchAllSavedInstruments>;
    }>;
    /**
     * To get the card network token, token expiry and cryptogram for a saved instrument using instrument id
     * @summary Fetch cryptogram for saved instrument
     * @param xClientId
     * @param xClientSecret
     * @param customerId
     * @param instrumentId
     * @param xApiVersion
     * @param xIdempotencyReplayed
     * @param xIdempotencyKey
     * @param xRequestId
     */
    fetchCryptogram(xClientId: string, xClientSecret: string, customerId: string, instrumentId: string, xApiVersion?: string, xIdempotencyReplayed?: boolean, xIdempotencyKey?: string, xRequestId?: string, requestTimeout?: Number, webProxy?: any, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        cfHeaders: http.IncomingHttpHeaders;
        cfCryptogram: CFCryptogram;
    }>;
    /**
     * To get specific saved instrument for a customer id and instrument id
     * @summary Fetch Single Saved Instrument
     * @param xClientId
     * @param xClientSecret
     * @param customerId
     * @param instrumentId
     * @param xApiVersion
     * @param xIdempotencyReplayed
     * @param xIdempotencyKey
     * @param xRequestId
     */
    fetchSpecificSavedInstrument(xClientId: string, xClientSecret: string, customerId: string, instrumentId: string, xApiVersion?: string, xIdempotencyReplayed?: boolean, xIdempotencyKey?: string, xRequestId?: string, requestTimeout?: Number, webProxy?: any, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        cfHeaders: http.IncomingHttpHeaders;
        cfInstrument: CFFetchAllSavedInstruments;
    }>;
}
