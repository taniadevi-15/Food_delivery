/**
 * New Payment Gateway APIs
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2022-01-01
 * Contact: nextgenapi@cashfree.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/// <reference types="node" />
import http from 'http';
import { CFLink } from '../model/cFLink';
import { CFLinkCancelledResponse } from '../model/cFLinkCancelledResponse';
import { CFLinkOrders } from '../model/cFLinkOrders';
import { CFLinkRequest } from '../model/cFLinkRequest';
import { Authentication, Interceptor } from '../model/models';
export declare enum PaymentLinksApiApiKeys {
}
export declare class PaymentLinksApi {
    protected _basePath: string;
    protected _defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
    };
    protected interceptors: Interceptor[];
    constructor(basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    set defaultHeaders(defaultHeaders: any);
    get defaultHeaders(): any;
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: PaymentLinksApiApiKeys, value: string): void;
    addInterceptor(interceptor: Interceptor): void;
    /**
     * Use this API to cancel a payment link. No further payments can be done against a cancelled link. Only a link in ACTIVE status can be cancelled.
     * @summary Cancel Payment Link
     * @param xClientId
     * @param xClientSecret
     * @param linkId
     * @param xApiVersion
     */
    cancelPaymentLink(xClientId: string, xClientSecret: string, linkId: string, xApiVersion?: string, requestTimeout?: Number, webProxy?: any, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        cfHeaders: http.IncomingHttpHeaders;
        cfLink: CFLinkCancelledResponse;
    }>;
    /**
     * Use this API to create a new payment link. The created payment link url will be available in the API response parameter link_url.
     * @summary Create Payment Link
     * @param xClientId
     * @param xClientSecret
     * @param xApiVersion
     * @param xIdempotencyReplayed
     * @param xIdempotencyKey
     * @param xRequestId
     * @param cFLinkRequest
     */
    createPaymentLink(xClientId: string, xClientSecret: string, xApiVersion?: string, xIdempotencyReplayed?: boolean, xIdempotencyKey?: string, xRequestId?: string, cFLinkRequest?: CFLinkRequest, requestTimeout?: Number, webProxy?: any, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        cfHeaders: http.IncomingHttpHeaders;
        cfLink: CFLink;
    }>;
    /**
     * Use this API to view all details and status of a payment link.
     * @summary Fetch Payment Link Details
     * @param xClientId
     * @param xClientSecret
     * @param linkId
     * @param xApiVersion
     * @param xIdempotencyReplayed
     * @param xIdempotencyKey
     * @param xRequestId
     */
    getPaymentLinkDetails(xClientId: string, xClientSecret: string, linkId: string, xApiVersion?: string, xIdempotencyReplayed?: boolean, xIdempotencyKey?: string, xRequestId?: string, requestTimeout?: Number, webProxy?: any, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        cfHeaders: http.IncomingHttpHeaders;
        cfLink: CFLink;
    }>;
    /**
     * Use this API to view all order details for a payment link.
     * @summary Get Orders for a Payment Link
     * @param xClientId
     * @param xClientSecret
     * @param linkId
     * @param xApiVersion
     * @param xIdempotencyReplayed
     * @param xIdempotencyKey
     * @param xRequestId
     */
    getPaymentLinkOrders(xClientId: string, xClientSecret: string, linkId: string, xApiVersion?: string, xIdempotencyReplayed?: boolean, xIdempotencyKey?: string, xRequestId?: string, requestTimeout?: Number, webProxy?: any, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        cfHeaders: http.IncomingHttpHeaders;
        cfLinkOrders: Array<CFLinkOrders>;
    }>;
}
