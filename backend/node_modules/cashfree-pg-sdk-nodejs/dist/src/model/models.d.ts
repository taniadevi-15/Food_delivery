/// <reference types="node" />
/// <reference types="node" />
import localVarRequest from 'request';
export * from './cFApp';
export * from './cFAppPayment';
export * from './cFAuthorizationInPaymentsEntity';
export * from './cFAuthorizationRequest';
export * from './cFCard';
export * from './cFCardEMI';
export * from './cFCardPayment';
export * from './cFCardlessEMI';
export * from './cFCardlessEMIPayment';
export * from './cFCryptogram';
export * from './cFCustomerDetails';
export * from './cFEMIPayment';
export * from './cFError';
export * from './cFFetchAllSavedInstruments';
export * from './cFLink';
export * from './cFLinkCancelledResponse';
export * from './cFLinkCustomerDetailsEntity';
export * from './cFLinkMetaEntity';
export * from './cFLinkNotifyEntity';
export * from './cFLinkOrders';
export * from './cFLinkRequest';
export * from './cFNetbanking';
export * from './cFNetbankingPayment';
export * from './cFOrder';
export * from './cFOrderMeta';
export * from './cFOrderPayData';
export * from './cFOrderPayRequest';
export * from './cFOrderPayResponse';
export * from './cFOrderRequest';
export * from './cFPaylater';
export * from './cFPaylaterPayment';
export * from './cFPaymentMethod';
export * from './cFPaymentURLObject';
export * from './cFPaymentsEntity';
export * from './cFPaymentsEntityAppPayment';
export * from './cFPaymentsEntityCardPayment';
export * from './cFPaymentsEntityCardlessEMIPayment';
export * from './cFPaymentsEntityMethod';
export * from './cFPaymentsEntityNetbankingPayment';
export * from './cFPaymentsEntityPaylaterPayment';
export * from './cFPaymentsEntityPayment';
export * from './cFPaymentsEntityUPIPayment';
export * from './cFRefund';
export * from './cFRefundRequest';
export * from './cFRefundURLObject';
export * from './cFSavedInstrumentMeta';
export * from './cFSettlementURLObject';
export * from './cFSettlementsEntity';
export * from './cFUPI';
export * from './cFUPIAuthorizeDetails';
export * from './cFUPIPayment';
export * from './cFVendorSplit';
export * from './linkCancelledError';
import * as fs from 'fs';
export interface RequestDetailedFile {
    value: Buffer;
    options?: {
        filename?: string;
        contentType?: string;
    };
}
export type RequestFile = string | Buffer | fs.ReadStream | RequestDetailedFile;
export declare class ObjectSerializer {
    static findCorrectType(data: any, expectedType: string): any;
    static serialize(data: any, type: string): any;
    static deserialize(data: any, type: string): any;
}
export interface Authentication {
    /**
    * Apply authentication settings to header and query params.
    */
    applyToRequest(requestOptions: localVarRequest.Options): Promise<void> | void;
}
export declare class HttpBasicAuth implements Authentication {
    username: string;
    password: string;
    applyToRequest(requestOptions: localVarRequest.Options): void;
}
export declare class HttpBearerAuth implements Authentication {
    accessToken: string | (() => string);
    applyToRequest(requestOptions: localVarRequest.Options): void;
}
export declare class ApiKeyAuth implements Authentication {
    private location;
    private paramName;
    apiKey: string;
    constructor(location: string, paramName: string);
    applyToRequest(requestOptions: localVarRequest.Options): void;
}
export declare class OAuth implements Authentication {
    accessToken: string;
    applyToRequest(requestOptions: localVarRequest.Options): void;
}
export declare class VoidAuth implements Authentication {
    username: string;
    password: string;
    applyToRequest(_: localVarRequest.Options): void;
}
export type Interceptor = (requestOptions: localVarRequest.Options) => (Promise<void> | void);
