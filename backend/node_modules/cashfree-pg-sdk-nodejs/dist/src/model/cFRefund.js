"use strict";
/**
 * New Payment Gateway APIs
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2022-01-01
 * Contact: nextgenapi@cashfree.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.CFRefund = void 0;
class CFRefund {
    static getAttributeTypeMap() {
        return CFRefund.attributeTypeMap;
    }
}
exports.CFRefund = CFRefund;
CFRefund.discriminator = undefined;
CFRefund.attributeTypeMap = [
    {
        "name": "cfPaymentId",
        "baseName": "cf_payment_id",
        "type": "number"
    },
    {
        "name": "cfRefundId",
        "baseName": "cf_refund_id",
        "type": "string"
    },
    {
        "name": "orderId",
        "baseName": "order_id",
        "type": "string"
    },
    {
        "name": "refundId",
        "baseName": "refund_id",
        "type": "string"
    },
    {
        "name": "entity",
        "baseName": "entity",
        "type": "CFRefund.EntityEnum"
    },
    {
        "name": "refundAmount",
        "baseName": "refund_amount",
        "type": "number"
    },
    {
        "name": "refundCurrency",
        "baseName": "refund_currency",
        "type": "string"
    },
    {
        "name": "refundNote",
        "baseName": "refund_note",
        "type": "string"
    },
    {
        "name": "refundStatus",
        "baseName": "refund_status",
        "type": "CFRefund.RefundStatusEnum"
    },
    {
        "name": "refundArn",
        "baseName": "refund_arn",
        "type": "string"
    },
    {
        "name": "refundCharge",
        "baseName": "refund_charge",
        "type": "number"
    },
    {
        "name": "statusDescription",
        "baseName": "status_description",
        "type": "string"
    },
    {
        "name": "metadata",
        "baseName": "metadata",
        "type": "object"
    },
    {
        "name": "refundSplits",
        "baseName": "refund_splits",
        "type": "Array<CFVendorSplit>"
    },
    {
        "name": "refundType",
        "baseName": "refund_type",
        "type": "CFRefund.RefundTypeEnum"
    },
    {
        "name": "refundMode",
        "baseName": "refund_mode",
        "type": "CFRefund.RefundModeEnum"
    },
    {
        "name": "createdAt",
        "baseName": "created_at",
        "type": "string"
    },
    {
        "name": "processedAt",
        "baseName": "processed_at",
        "type": "string"
    }
];
(function (CFRefund) {
    let EntityEnum;
    (function (EntityEnum) {
        EntityEnum[EntityEnum["Refund"] = 'refund'] = "Refund";
    })(EntityEnum = CFRefund.EntityEnum || (CFRefund.EntityEnum = {}));
    let RefundStatusEnum;
    (function (RefundStatusEnum) {
        RefundStatusEnum[RefundStatusEnum["Success"] = 'SUCCESS'] = "Success";
        RefundStatusEnum[RefundStatusEnum["Pending"] = 'PENDING'] = "Pending";
        RefundStatusEnum[RefundStatusEnum["Cancelled"] = 'CANCELLED'] = "Cancelled";
        RefundStatusEnum[RefundStatusEnum["Onhold"] = 'ONHOLD'] = "Onhold";
    })(RefundStatusEnum = CFRefund.RefundStatusEnum || (CFRefund.RefundStatusEnum = {}));
    let RefundTypeEnum;
    (function (RefundTypeEnum) {
        RefundTypeEnum[RefundTypeEnum["PaymentAutoRefund"] = 'PAYMENT_AUTO_REFUND'] = "PaymentAutoRefund";
        RefundTypeEnum[RefundTypeEnum["MerchantInitiated"] = 'MERCHANT_INITIATED'] = "MerchantInitiated";
        RefundTypeEnum[RefundTypeEnum["UnreconciledAutoRefund"] = 'UNRECONCILED_AUTO_REFUND'] = "UnreconciledAutoRefund";
    })(RefundTypeEnum = CFRefund.RefundTypeEnum || (CFRefund.RefundTypeEnum = {}));
    let RefundModeEnum;
    (function (RefundModeEnum) {
        RefundModeEnum[RefundModeEnum["Standard"] = 'STANDARD'] = "Standard";
        RefundModeEnum[RefundModeEnum["Instant"] = 'INSTANT'] = "Instant";
    })(RefundModeEnum = CFRefund.RefundModeEnum || (CFRefund.RefundModeEnum = {}));
})(CFRefund = exports.CFRefund || (exports.CFRefund = {}));
