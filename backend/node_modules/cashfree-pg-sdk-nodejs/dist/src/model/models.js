"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VoidAuth = exports.OAuth = exports.ApiKeyAuth = exports.HttpBearerAuth = exports.HttpBasicAuth = exports.ObjectSerializer = void 0;
__exportStar(require("./cFApp"), exports);
__exportStar(require("./cFAppPayment"), exports);
__exportStar(require("./cFAuthorizationInPaymentsEntity"), exports);
__exportStar(require("./cFAuthorizationRequest"), exports);
__exportStar(require("./cFCard"), exports);
__exportStar(require("./cFCardEMI"), exports);
__exportStar(require("./cFCardPayment"), exports);
__exportStar(require("./cFCardlessEMI"), exports);
__exportStar(require("./cFCardlessEMIPayment"), exports);
__exportStar(require("./cFCryptogram"), exports);
__exportStar(require("./cFCustomerDetails"), exports);
__exportStar(require("./cFEMIPayment"), exports);
__exportStar(require("./cFError"), exports);
__exportStar(require("./cFFetchAllSavedInstruments"), exports);
__exportStar(require("./cFLink"), exports);
__exportStar(require("./cFLinkCancelledResponse"), exports);
__exportStar(require("./cFLinkCustomerDetailsEntity"), exports);
__exportStar(require("./cFLinkMetaEntity"), exports);
__exportStar(require("./cFLinkNotifyEntity"), exports);
__exportStar(require("./cFLinkOrders"), exports);
__exportStar(require("./cFLinkRequest"), exports);
__exportStar(require("./cFNetbanking"), exports);
__exportStar(require("./cFNetbankingPayment"), exports);
__exportStar(require("./cFOrder"), exports);
__exportStar(require("./cFOrderMeta"), exports);
__exportStar(require("./cFOrderPayData"), exports);
__exportStar(require("./cFOrderPayRequest"), exports);
__exportStar(require("./cFOrderPayResponse"), exports);
__exportStar(require("./cFOrderRequest"), exports);
__exportStar(require("./cFPaylater"), exports);
__exportStar(require("./cFPaylaterPayment"), exports);
__exportStar(require("./cFPaymentMethod"), exports);
__exportStar(require("./cFPaymentURLObject"), exports);
__exportStar(require("./cFPaymentsEntity"), exports);
__exportStar(require("./cFPaymentsEntityAppPayment"), exports);
__exportStar(require("./cFPaymentsEntityCardPayment"), exports);
__exportStar(require("./cFPaymentsEntityCardlessEMIPayment"), exports);
__exportStar(require("./cFPaymentsEntityMethod"), exports);
__exportStar(require("./cFPaymentsEntityNetbankingPayment"), exports);
__exportStar(require("./cFPaymentsEntityPaylaterPayment"), exports);
__exportStar(require("./cFPaymentsEntityPayment"), exports);
__exportStar(require("./cFPaymentsEntityUPIPayment"), exports);
__exportStar(require("./cFRefund"), exports);
__exportStar(require("./cFRefundRequest"), exports);
__exportStar(require("./cFRefundURLObject"), exports);
__exportStar(require("./cFSavedInstrumentMeta"), exports);
__exportStar(require("./cFSettlementURLObject"), exports);
__exportStar(require("./cFSettlementsEntity"), exports);
__exportStar(require("./cFUPI"), exports);
__exportStar(require("./cFUPIAuthorizeDetails"), exports);
__exportStar(require("./cFUPIPayment"), exports);
__exportStar(require("./cFVendorSplit"), exports);
__exportStar(require("./linkCancelledError"), exports);
const cFApp_1 = require("./cFApp");
const cFAppPayment_1 = require("./cFAppPayment");
const cFAuthorizationInPaymentsEntity_1 = require("./cFAuthorizationInPaymentsEntity");
const cFAuthorizationRequest_1 = require("./cFAuthorizationRequest");
const cFCard_1 = require("./cFCard");
const cFCardEMI_1 = require("./cFCardEMI");
const cFCardPayment_1 = require("./cFCardPayment");
const cFCardlessEMI_1 = require("./cFCardlessEMI");
const cFCardlessEMIPayment_1 = require("./cFCardlessEMIPayment");
const cFCryptogram_1 = require("./cFCryptogram");
const cFCustomerDetails_1 = require("./cFCustomerDetails");
const cFEMIPayment_1 = require("./cFEMIPayment");
const cFError_1 = require("./cFError");
const cFFetchAllSavedInstruments_1 = require("./cFFetchAllSavedInstruments");
const cFLink_1 = require("./cFLink");
const cFLinkCancelledResponse_1 = require("./cFLinkCancelledResponse");
const cFLinkCustomerDetailsEntity_1 = require("./cFLinkCustomerDetailsEntity");
const cFLinkMetaEntity_1 = require("./cFLinkMetaEntity");
const cFLinkNotifyEntity_1 = require("./cFLinkNotifyEntity");
const cFLinkOrders_1 = require("./cFLinkOrders");
const cFLinkRequest_1 = require("./cFLinkRequest");
const cFNetbanking_1 = require("./cFNetbanking");
const cFNetbankingPayment_1 = require("./cFNetbankingPayment");
const cFOrder_1 = require("./cFOrder");
const cFOrderMeta_1 = require("./cFOrderMeta");
const cFOrderPayData_1 = require("./cFOrderPayData");
const cFOrderPayRequest_1 = require("./cFOrderPayRequest");
const cFOrderPayResponse_1 = require("./cFOrderPayResponse");
const cFOrderRequest_1 = require("./cFOrderRequest");
const cFPaylater_1 = require("./cFPaylater");
const cFPaylaterPayment_1 = require("./cFPaylaterPayment");
const cFPaymentMethod_1 = require("./cFPaymentMethod");
const cFPaymentURLObject_1 = require("./cFPaymentURLObject");
const cFPaymentsEntity_1 = require("./cFPaymentsEntity");
const cFPaymentsEntityAppPayment_1 = require("./cFPaymentsEntityAppPayment");
const cFPaymentsEntityCardPayment_1 = require("./cFPaymentsEntityCardPayment");
const cFPaymentsEntityCardlessEMIPayment_1 = require("./cFPaymentsEntityCardlessEMIPayment");
const cFPaymentsEntityMethod_1 = require("./cFPaymentsEntityMethod");
const cFPaymentsEntityNetbankingPayment_1 = require("./cFPaymentsEntityNetbankingPayment");
const cFPaymentsEntityPaylaterPayment_1 = require("./cFPaymentsEntityPaylaterPayment");
const cFPaymentsEntityPayment_1 = require("./cFPaymentsEntityPayment");
const cFPaymentsEntityUPIPayment_1 = require("./cFPaymentsEntityUPIPayment");
const cFRefund_1 = require("./cFRefund");
const cFRefundRequest_1 = require("./cFRefundRequest");
const cFRefundURLObject_1 = require("./cFRefundURLObject");
const cFSavedInstrumentMeta_1 = require("./cFSavedInstrumentMeta");
const cFSettlementURLObject_1 = require("./cFSettlementURLObject");
const cFSettlementsEntity_1 = require("./cFSettlementsEntity");
const cFUPI_1 = require("./cFUPI");
const cFUPIAuthorizeDetails_1 = require("./cFUPIAuthorizeDetails");
const cFUPIPayment_1 = require("./cFUPIPayment");
const cFVendorSplit_1 = require("./cFVendorSplit");
const linkCancelledError_1 = require("./linkCancelledError");
/* tslint:disable:no-unused-variable */
let primitives = [
    "string",
    "boolean",
    "double",
    "integer",
    "long",
    "float",
    "number",
    "any"
];
let enumsMap = {
    "CFApp.ChannelEnum": cFApp_1.CFApp.ChannelEnum,
    "CFAuthorizationInPaymentsEntity.ActionEnum": cFAuthorizationInPaymentsEntity_1.CFAuthorizationInPaymentsEntity.ActionEnum,
    "CFAuthorizationInPaymentsEntity.StatusEnum": cFAuthorizationInPaymentsEntity_1.CFAuthorizationInPaymentsEntity.StatusEnum,
    "CFAuthorizationRequest.ActionEnum": cFAuthorizationRequest_1.CFAuthorizationRequest.ActionEnum,
    "CFCard.CardBankNameEnum": cFCard_1.CFCard.CardBankNameEnum,
    "CFCardEMI.ChannelEnum": cFCardEMI_1.CFCardEMI.ChannelEnum,
    "CFCardEMI.CardBankNameEnum": cFCardEMI_1.CFCardEMI.CardBankNameEnum,
    "CFCardlessEMI.ChannelEnum": cFCardlessEMI_1.CFCardlessEMI.ChannelEnum,
    "CFCardlessEMI.ProviderEnum": cFCardlessEMI_1.CFCardlessEMI.ProviderEnum,
    "CFError.TypeEnum": cFError_1.CFError.TypeEnum,
    "CFFetchAllSavedInstruments.InstrumentTypeEnum": cFFetchAllSavedInstruments_1.CFFetchAllSavedInstruments.InstrumentTypeEnum,
    "CFFetchAllSavedInstruments.InstrumentStatusEnum": cFFetchAllSavedInstruments_1.CFFetchAllSavedInstruments.InstrumentStatusEnum,
    "CFOrderPayResponse.PaymentMethodEnum": cFOrderPayResponse_1.CFOrderPayResponse.PaymentMethodEnum,
    "CFOrderPayResponse.ChannelEnum": cFOrderPayResponse_1.CFOrderPayResponse.ChannelEnum,
    "CFOrderPayResponse.ActionEnum": cFOrderPayResponse_1.CFOrderPayResponse.ActionEnum,
    "CFPaylater.ProviderEnum": cFPaylater_1.CFPaylater.ProviderEnum,
    "CFPaymentsEntity.PaymentStatusEnum": cFPaymentsEntity_1.CFPaymentsEntity.PaymentStatusEnum,
    "CFRefund.EntityEnum": cFRefund_1.CFRefund.EntityEnum,
    "CFRefund.RefundStatusEnum": cFRefund_1.CFRefund.RefundStatusEnum,
    "CFRefund.RefundTypeEnum": cFRefund_1.CFRefund.RefundTypeEnum,
    "CFRefund.RefundModeEnum": cFRefund_1.CFRefund.RefundModeEnum,
    "CFUPI.ChannelEnum": cFUPI_1.CFUPI.ChannelEnum,
};
let typeMap = {
    "CFApp": cFApp_1.CFApp,
    "CFAppPayment": cFAppPayment_1.CFAppPayment,
    "CFAuthorizationInPaymentsEntity": cFAuthorizationInPaymentsEntity_1.CFAuthorizationInPaymentsEntity,
    "CFAuthorizationRequest": cFAuthorizationRequest_1.CFAuthorizationRequest,
    "CFCard": cFCard_1.CFCard,
    "CFCardEMI": cFCardEMI_1.CFCardEMI,
    "CFCardPayment": cFCardPayment_1.CFCardPayment,
    "CFCardlessEMI": cFCardlessEMI_1.CFCardlessEMI,
    "CFCardlessEMIPayment": cFCardlessEMIPayment_1.CFCardlessEMIPayment,
    "CFCryptogram": cFCryptogram_1.CFCryptogram,
    "CFCustomerDetails": cFCustomerDetails_1.CFCustomerDetails,
    "CFEMIPayment": cFEMIPayment_1.CFEMIPayment,
    "CFError": cFError_1.CFError,
    "CFFetchAllSavedInstruments": cFFetchAllSavedInstruments_1.CFFetchAllSavedInstruments,
    "CFLink": cFLink_1.CFLink,
    "CFLinkCancelledResponse": cFLinkCancelledResponse_1.CFLinkCancelledResponse,
    "CFLinkCustomerDetailsEntity": cFLinkCustomerDetailsEntity_1.CFLinkCustomerDetailsEntity,
    "CFLinkMetaEntity": cFLinkMetaEntity_1.CFLinkMetaEntity,
    "CFLinkNotifyEntity": cFLinkNotifyEntity_1.CFLinkNotifyEntity,
    "CFLinkOrders": cFLinkOrders_1.CFLinkOrders,
    "CFLinkRequest": cFLinkRequest_1.CFLinkRequest,
    "CFNetbanking": cFNetbanking_1.CFNetbanking,
    "CFNetbankingPayment": cFNetbankingPayment_1.CFNetbankingPayment,
    "CFOrder": cFOrder_1.CFOrder,
    "CFOrderMeta": cFOrderMeta_1.CFOrderMeta,
    "CFOrderPayData": cFOrderPayData_1.CFOrderPayData,
    "CFOrderPayRequest": cFOrderPayRequest_1.CFOrderPayRequest,
    "CFOrderPayResponse": cFOrderPayResponse_1.CFOrderPayResponse,
    "CFOrderRequest": cFOrderRequest_1.CFOrderRequest,
    "CFPaylater": cFPaylater_1.CFPaylater,
    "CFPaylaterPayment": cFPaylaterPayment_1.CFPaylaterPayment,
    "CFPaymentMethod": cFPaymentMethod_1.CFPaymentMethod,
    "CFPaymentURLObject": cFPaymentURLObject_1.CFPaymentURLObject,
    "CFPaymentsEntity": cFPaymentsEntity_1.CFPaymentsEntity,
    "CFPaymentsEntityAppPayment": cFPaymentsEntityAppPayment_1.CFPaymentsEntityAppPayment,
    "CFPaymentsEntityCardPayment": cFPaymentsEntityCardPayment_1.CFPaymentsEntityCardPayment,
    "CFPaymentsEntityCardlessEMIPayment": cFPaymentsEntityCardlessEMIPayment_1.CFPaymentsEntityCardlessEMIPayment,
    "CFPaymentsEntityMethod": cFPaymentsEntityMethod_1.CFPaymentsEntityMethod,
    "CFPaymentsEntityNetbankingPayment": cFPaymentsEntityNetbankingPayment_1.CFPaymentsEntityNetbankingPayment,
    "CFPaymentsEntityPaylaterPayment": cFPaymentsEntityPaylaterPayment_1.CFPaymentsEntityPaylaterPayment,
    "CFPaymentsEntityPayment": cFPaymentsEntityPayment_1.CFPaymentsEntityPayment,
    "CFPaymentsEntityUPIPayment": cFPaymentsEntityUPIPayment_1.CFPaymentsEntityUPIPayment,
    "CFRefund": cFRefund_1.CFRefund,
    "CFRefundRequest": cFRefundRequest_1.CFRefundRequest,
    "CFRefundURLObject": cFRefundURLObject_1.CFRefundURLObject,
    "CFSavedInstrumentMeta": cFSavedInstrumentMeta_1.CFSavedInstrumentMeta,
    "CFSettlementURLObject": cFSettlementURLObject_1.CFSettlementURLObject,
    "CFSettlementsEntity": cFSettlementsEntity_1.CFSettlementsEntity,
    "CFUPI": cFUPI_1.CFUPI,
    "CFUPIAuthorizeDetails": cFUPIAuthorizeDetails_1.CFUPIAuthorizeDetails,
    "CFUPIPayment": cFUPIPayment_1.CFUPIPayment,
    "CFVendorSplit": cFVendorSplit_1.CFVendorSplit,
    "LinkCancelledError": linkCancelledError_1.LinkCancelledError,
};
class ObjectSerializer {
    static findCorrectType(data, expectedType) {
        if (data == undefined) {
            return expectedType;
        }
        else if (primitives.indexOf(expectedType.toLowerCase()) !== -1) {
            return expectedType;
        }
        else if (expectedType === "Date") {
            return expectedType;
        }
        else {
            if (enumsMap[expectedType]) {
                return expectedType;
            }
            if (!typeMap[expectedType]) {
                return expectedType; // w/e we don't know the type
            }
            // Check the discriminator
            let discriminatorProperty = typeMap[expectedType].discriminator;
            if (discriminatorProperty == null) {
                return expectedType; // the type does not have a discriminator. use it.
            }
            else {
                if (data[discriminatorProperty]) {
                    var discriminatorType = data[discriminatorProperty];
                    if (typeMap[discriminatorType]) {
                        return discriminatorType; // use the type given in the discriminator
                    }
                    else {
                        return expectedType; // discriminator did not map to a type
                    }
                }
                else {
                    return expectedType; // discriminator was not present (or an empty string)
                }
            }
        }
    }
    static serialize(data, type) {
        if (data == undefined) {
            return data;
        }
        else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        }
        else if (type.lastIndexOf("Array<", 0) === 0) { // string.startsWith pre es6
            let subType = type.replace("Array<", ""); // Array<Type> => Type>
            subType = subType.substring(0, subType.length - 1); // Type> => Type
            let transformedData = [];
            for (let index = 0; index < data.length; index++) {
                let datum = data[index];
                transformedData.push(ObjectSerializer.serialize(datum, subType));
            }
            return transformedData;
        }
        else if (type === "Date") {
            return data.toISOString();
        }
        else {
            if (enumsMap[type]) {
                return data;
            }
            if (!typeMap[type]) { // in case we dont know the type
                return data;
            }
            // Get the actual type of this object
            type = this.findCorrectType(data, type);
            // get the map for the correct type.
            let attributeTypes = typeMap[type].getAttributeTypeMap();
            let instance = {};
            for (let index = 0; index < attributeTypes.length; index++) {
                let attributeType = attributeTypes[index];
                instance[attributeType.baseName] = ObjectSerializer.serialize(data[attributeType.name], attributeType.type);
            }
            return instance;
        }
    }
    static deserialize(data, type) {
        // polymorphism may change the actual type.
        type = ObjectSerializer.findCorrectType(data, type);
        if (data == undefined) {
            return data;
        }
        else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        }
        else if (type.lastIndexOf("Array<", 0) === 0) { // string.startsWith pre es6
            let subType = type.replace("Array<", ""); // Array<Type> => Type>
            subType = subType.substring(0, subType.length - 1); // Type> => Type
            let transformedData = [];
            for (let index = 0; index < data.length; index++) {
                let datum = data[index];
                transformedData.push(ObjectSerializer.deserialize(datum, subType));
            }
            return transformedData;
        }
        else if (type === "Date") {
            return new Date(data);
        }
        else {
            if (enumsMap[type]) { // is Enum
                return data;
            }
            if (!typeMap[type]) { // dont know the type
                return data;
            }
            let instance = new typeMap[type]();
            let attributeTypes = typeMap[type].getAttributeTypeMap();
            for (let index = 0; index < attributeTypes.length; index++) {
                let attributeType = attributeTypes[index];
                instance[attributeType.name] = ObjectSerializer.deserialize(data[attributeType.baseName], attributeType.type);
            }
            return instance;
        }
    }
}
exports.ObjectSerializer = ObjectSerializer;
class HttpBasicAuth {
    constructor() {
        this.username = '';
        this.password = '';
    }
    applyToRequest(requestOptions) {
        requestOptions.auth = {
            username: this.username, password: this.password
        };
    }
}
exports.HttpBasicAuth = HttpBasicAuth;
class HttpBearerAuth {
    constructor() {
        this.accessToken = '';
    }
    applyToRequest(requestOptions) {
        if (requestOptions && requestOptions.headers) {
            const accessToken = typeof this.accessToken === 'function'
                ? this.accessToken()
                : this.accessToken;
            requestOptions.headers["Authorization"] = "Bearer " + accessToken;
        }
    }
}
exports.HttpBearerAuth = HttpBearerAuth;
class ApiKeyAuth {
    constructor(location, paramName) {
        this.location = location;
        this.paramName = paramName;
        this.apiKey = '';
    }
    applyToRequest(requestOptions) {
        if (this.location == "query") {
            requestOptions.qs[this.paramName] = this.apiKey;
        }
        else if (this.location == "header" && requestOptions && requestOptions.headers) {
            requestOptions.headers[this.paramName] = this.apiKey;
        }
        else if (this.location == 'cookie' && requestOptions && requestOptions.headers) {
            if (requestOptions.headers['Cookie']) {
                requestOptions.headers['Cookie'] += '; ' + this.paramName + '=' + encodeURIComponent(this.apiKey);
            }
            else {
                requestOptions.headers['Cookie'] = this.paramName + '=' + encodeURIComponent(this.apiKey);
            }
        }
    }
}
exports.ApiKeyAuth = ApiKeyAuth;
class OAuth {
    constructor() {
        this.accessToken = '';
    }
    applyToRequest(requestOptions) {
        if (requestOptions && requestOptions.headers) {
            requestOptions.headers["Authorization"] = "Bearer " + this.accessToken;
        }
    }
}
exports.OAuth = OAuth;
class VoidAuth {
    constructor() {
        this.username = '';
        this.password = '';
    }
    applyToRequest(_) {
        // Do nothing
    }
}
exports.VoidAuth = VoidAuth;
